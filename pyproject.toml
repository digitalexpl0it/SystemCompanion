[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/system_companion/_version.py"
fallback_version = "0.1.0"

[project]
name = "system-companion"
dynamic = ["version"]
description = "A fast, optimized, and beautiful system health & maintenance dashboard for Ubuntu Linux"
long-description = "file: README.md"
long-description-content-type = "text/markdown"
readme = "README.md"
license = {text = "GPL-3.0"}
authors = [
    {name = "DigitalExpl0it", email = "digitalexploit@protonmail.com"}
]
maintainers = [
    {name = "DigitalExpl0it", email = "digitalexploit@protonmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: Desktop Environment :: GNOME",
    "Topic :: Utilities",
    "Environment :: X11 Applications :: GTK",
]
requires-python = ">=3.11"
keywords = ["system", "monitoring", "dashboard", "gtk4", "ubuntu", "linux", "maintenance"]
dependencies = [
    "psutil>=5.9.0",
    "py-cpuinfo>=9.0.0",
    "GPUtil>=1.4.0",
    "netifaces>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "mypy>=1.5.0",
    "flake8>=6.0.0",
    "pre-commit>=3.3.0",
    "meson-python>=1.0.0",
    "ninja>=1.11.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-gtk>=4.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.scripts]
system-companion = "system_companion.main:main"

[project.urls]
Homepage = "https://github.com/digitalexpl0it/SystemCompanion"
Repository = "https://github.com/digitalexpl0it/SystemCompanion.git"
Documentation = "https://github.com/digitalexpl0it/SystemCompanion/tree/main/docs"
"Bug Tracker" = "https://github.com/digitalexpl0it/SystemCompanion/issues"
"Discussions" = "https://github.com/digitalexpl0it/SystemCompanion/discussions"
"Changelog" = "https://github.com/digitalexpl0it/SystemCompanion/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gi.*",
    "psutil.*",
    "cpuinfo.*",
    "GPUtil.*",
    "netifaces.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "src/system_companion/ui/widgets/__pycache__",
]

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0621",  # redefined-outer-name
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"] 